---
import { CardGrid } from "@astrojs/starlight/components";

// GitHub APIからコントリビューターを取得する関数
async function getContributors() {
  const response = await fetch('https://api.github.com/repos/TutoriaLLM/TutoriaLLM/contributors');
  if (!response.ok) {
    return [{
      login: "Error for contributors",
      avatar_url: "",
      html_url: "",
      contributions: 999
    }];
  }
  return await response.json();
}

async function getMembers() {
  const response = await fetch('https://api.github.com/orgs/TutoriaLLM/members');
  if (!response.ok) {
    return [{
      login: "Error for members",
      avatar_url: "",
      html_url: "",
      contributions: 999
    }];
  }
  return await response.json();
}

// サーバーサイドでコントリビューターとメンバーを取得
const contributors = await getContributors();
const members = await getMembers();

// コントリビューターのデータをログイン名でマップ化
const contributorMap = new Map(contributors.map((contributor: { login: string; contributions: number; }) => [contributor.login, contributor.contributions]));

// メンバーのログイン名のセットを作成
const memberLogins = new Set(members.map((member: { login: string; }) => member.login));

// コントリビューターからメンバーを除外
const filteredContributors = contributors.filter(
(  contributor: { login: unknown; }) => !memberLogins.has(contributor.login)
);

// メンバーにコントリビューション数を追加
const membersWithContributions = members.map((member: { login: unknown; }) => ({
  ...member,
  contributions: contributorMap.get(member.login) || 0
}));
---
<style>
  .card {
    padding: 1rem;
    border: 1px solid #ccc;
    border-radius: 20px;
    display: flex;
    align-items: center;
    gap: 1rem;
    overflow: clip;
  }
  .info {
    display: flex;
    flex-direction: column;
  }
  img {
    border-radius: 50%;
  }
  h2 {
    margin-top: 2rem;
  }
</style>

<!-- メンバーの表示 -->
<h3>Members</h3>
<CardGrid>
  {membersWithContributions.map((member: { avatar_url: string | null | undefined; login: string; html_url: string | URL | null | undefined; contributions: unknown; }) => (
    <div class="card">
      <img src={member.avatar_url} alt={member.login} width="50" height="50" />
      <span class="info">
        <a href={member.html_url}>@{member.login}</a>
        <p>Contributions: {member.contributions}</p>
      </span>
    </div>
  ))}
</CardGrid>

<!-- コントリビューターの表示 -->
<h3>Contributors</h3>
<CardGrid>
  {filteredContributors.map((contributor: { avatar_url: string | null | undefined; login: string; html_url: string | URL | null | undefined; contributions: unknown; }) => (
    <div class="card">
      <img src={contributor.avatar_url} alt={contributor.login} width="50" height="50" />
      <span class="info">
        <a href={contributor.html_url}>@{contributor.login}</a>
        <p>Contributions: {contributor.contributions}</p>
      </span>
    </div>
  ))}
</CardGrid>