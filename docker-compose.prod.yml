version: '3.8'

services:
  reverse-proxy:
      # The official v3 Traefik docker image
      image: traefik:v3.1
      # Enables the web UI and tells Traefik to listen to docker
      command: --api.insecure=true --providers.docker
      ports:
        # The HTTP port
        - "80:80"
        # The Web UI (enabled by --api.insecure=true)
        - "8080:8080"
      volumes:
        # So that Traefik can listen to the Docker events
        - /var/run/docker.sock:/var/run/docker.sock
  redis:
    container_name: code-tutorial-redis-prod
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    restart: always
  db:
    container_name: code-tutorial-db-prod
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_DB: $DB_NAME
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: UTC
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s 
    volumes:
      - db_data_db:/var/lib/postgresql/data
    restart: always
  app: 
    container_name: code-tutorial-app-prod
    build:
      context: .
      dockerfile: Dockerfile.prod
    # ports:
    #   - $SERVER_PORT:$SERVER_PORT
    #   - $VM_PORT:$VM_PORT
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.code-tutorial-app-prod.rule=Host(`$DOMAIN_NAME`)"
      - "traefik.http.routers.code-tutorial-app-prod.entrypoints=web"
    restart: always
    env_file:
      - .env
    command: >
      sh -c "
        if [ ! -f /.initialized ]; then
          pnpm install &&
          pnpm run drizzle:generate &&
          pnpm run drizzle:push &&
          pnpm run reset-credential &&
          pnpm run reset-tutorials &&
          touch /.initialized &&
          pnpm run start 
        else
          pnpm install &&
          pnpm run drizzle:generate &&
          pnpm run drizzle:push &&
          pnpm run start;
        fi
      "
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
volumes:
  db_data_db:
