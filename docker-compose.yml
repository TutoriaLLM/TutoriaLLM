services:
  jaeger: # telemetry collector
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "16687:16687"
      - "4317:4317"
      - "4318:4318"
      - "9411:9411"

  db:
    container_name: tutoriallm_db
    image: pgvector/pgvector:pg14
    ports:
      - ${DB_PORT:-5432}:5432
    env_file:
      - ./apps/backend/.env
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - PGDATA=/var/lib/postgresql/data/pgdata
      - TZ=UTC
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 5s
      timeout: 60s
      retries: 5
      start_period: 5s
    volumes:
      - db_data_db:/var/lib/postgresql/data

  frontend: # Usually, frontend is hosted by cloud services like Vercel, Netlify, etc. This is just for local development.
    container_name: tutoriallm_frontend
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    environment:
      - VITE_BACKEND_URL=http://localhost:3001
    ports:
      - "3000:3000"

  backend: 
    container_name: tutoriallm_backend
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    ports:
      - "3001:3001"
      - "3002:3002"
    env_file:
      - ./apps/backend/.env
    command: >
      sh -c "
        if [ ! -f /app_data/.initialized ]; then
          pnpm install &&
          pnpm run drizzle:generate &&
          pnpm run drizzle:migrate &&
          pnpm run reset-credential &&
          touch /app_data/.initialized &&
          pnpm run start;
        else
          pnpm install &&
          pnpm run drizzle:generate &&
          pnpm run drizzle:migrate &&
          pnpm run start;
        fi
      "
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./app_data:/app_data


volumes:
  db_data_db:
